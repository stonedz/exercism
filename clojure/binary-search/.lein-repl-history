 (ns binary-search)                                                                        
  6 (defn middle [my-vector] ;; <- arglist goes here                                          
  5   (int (/ (count my-vector) 2))                                                           
  4 )         
(middle [1 2 3]
))
(middle [1 2 3])
(middle [1 2 3 6 6 ])
(middle [1 2 3 6 6 4 2 2 1 ])
(/ 10 2)
(int (/ 10 2))
(int (/ (count [1 2 3 4]) 2))
(defn middle [my-vector]
  (int (/ (count my-vector) 2))
) 
(middle [1 2 3 6 6 ])
(middle [1 2 3 6 6 4 2 2 1 ])
(nth [1 2 3 4 5 6 7 8] 3)
(nth [1 2 3 4 5 6 7 8] (middle [1 2 3 4 5 6 7 8]))
(take 5 [1 2 3 4 5 6 7 8])
(use 'binary-search  :reload)
search-for 4 [4]
search-for 4 [4 45 5 ]
search-for 5 [1 3 4]
middle [1 2 3 4 5]
(println (middle [1 2 3 4]))
(println (middle [1 2 3 5 45 3 2 2]))
(count [1 2 3 4])
(count [1 2 3 4 5])
(println (middle [1 2 3 4 5]))
(println (middle [1 2 3 4 5 6]))
(/ (count [1 2 3 4 5 6]) 2)
(/ (count [1 2 3 4 5]) 2)
(quot (/ (count [1 2 3 4 5]) 2))
(quot (count [1 2 3 4 5]) 2)
(use 'binary-search :reload-all)
(middle [1 2 3])
(middle [1 2 3 4])
(middle [1 2 3 4 5])
(search-for 4 [4])
(use 'binary-search :reload-all)
(search-for 4 [4])
(search-for 4 [4 3 4 5 5 6 6]
))
(search-for 4 [4 3 4 5 5 6 6])
(use 'binary-search :reload-all)
(search-for 4 [4 3 4 5 5 6 6])
(search-for 4 [1 2 3])
(search-for 4 [1 2 3 4])
